#+TITLE: Emacs configuration file
#+AUTHOR: Globz
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes
#+LAST_MODIFIED: 2024-02-09

* About

  This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. 

  This configuration file is heavily based on the original work of 
  =Lars Tveito=. 

  The original configuration is located @ https://github.com/larstvei/dot-emacs


  This is my attempt to keep my =~/.emacs.d= tidy and easy to manage while also
  giving me the maximum amount of powerful tools and functionalities without
  slowing down this glorious Lisp Machine to a grinding halt. 


  Follow these simple steps in order to enable this configuration on your
  system :

  Clone the repo.
  #+begin_src sh :tangle no
  git clone https://github.com/globz/emacs-conf
  #+end_src

  Backup your old =~/.emacs.d= (if necessary).
  #+begin_src sh :tangle no
  mv ~/.emacs.d ~/.emacs.d-bak
  #+end_src

  Backup your old =~/.emacs=-file (if necessary).
  #+begin_src sh :tangle no
  mv ~/.emacs ~/.emacs-bak
  #+end_src

  And finally
  #+begin_src sh :tangle no
  mv emacs-conf ~/.emacs.d
  #+end_src

  On first run it should install a bunch of packages (this might take a
  while), and you might have to restart your Emacs the first time.

* Meta

  All changes to the configuration should be done in =init.org=, *not* in
  =init.el=. Any changes in the =init.el= will be overwritten by saving
  =init.org=. The =init.el= in this repo should not be tracked by git, and is
  replaced the first time Emacs is started (assuming it has been renamed to
  =~/.emacs.d=).

  Emacs can't load =.org=-files directly, but =org-mode= provides functions to
  extract the code blocks and write them to a file. There are multiple ways of
  handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one could just use
  =org-babel-load-file=, but I had problems with byte-compilation. Previously I
  tracked both the =org.=- and =el.=-files, but the git commits got a little
  messy. So here is a new approach.

  When this configuration is loaded for the first time, the ~init.el~ is the
  file that is loaded. It looks like this:

  #+begin_src emacs-lisp :tangle no

  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))

  #+end_src

  It tangles the org-file, so that this file is overwritten with the actual
  configuration.

  There is no reason to track the =init.el= that is generated; by running the
  following command =git= will not bother tracking it:

  #+begin_src sh :tangle no

  git update-index --assume-unchanged init.el

  #+end_src

  If one wishes to make changes to the repo-version of =init.el= start tracking
  again with:

  #+begin_src sh :tangle no

  git update-index --no-assume-unchanged init.el

  #+end_src

  I want lexical scoping for the init-file, which can be specified in the
  header. The first line of the configuration is as follows:

  #+begin_src emacs-lisp

  ;;; -*- lexical-binding: t -*-

  #+end_src

  The =init.el= should (after the first run) mirror the source blocks in the
  =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts
  the code blocks from the current file into a source-specific file (in this
  case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to the
  =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  #+begin_src emacs-lisp

  (defun tangle-init ()
    "If the current buffer is init.org the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)

  #+end_src

  * Packages
  
  John Wiegley's extremely popular [[https://github.com/jwiegley/use-package][use-package]] was included in [[https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg00261.html][Emacs 29]]. It
  provides a powerful macro for isolating package configuration.

  #+begin_src emacs-lisp

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

  Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive
  and is well maintained.

  #+begin_src emacs-lisp

  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))

  #+end_src

* Sane defaults

  These are what /I/ consider to be saner defaults.

  Set =utf-8= as preferred coding system.

  #+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))    
  #+end_src

   We can set variables to whatever value we'd like using =setq=.

  #+begin_src emacs-lisp
   (setq auto-revert-interval 1            ; Refresh buffers fast
         custom-file (make-temp-file "")   ; Discard customization's
         default-input-method "TeX"        ; Use TeX when toggling input method
         echo-keystrokes 0.1               ; Show keystrokes asap
         inhibit-startup-message t         ; No splash screen please
         initial-scratch-message nil       ; Clean scratch buffer
         recentf-max-saved-items 100       ; Show more recent files
         ring-bell-function 'ignore        ; Quiet 
         sentence-end-double-space nil)    ; No double space
  #+end_src

   Some variables are buffer-local, so changing them using =setq= will only
   change them in a single buffer. Using =setq-default= we change the
   buffer-local variable's default value.

  #+begin_src emacs-lisp
   (setq-default fill-column 79                    ; Maximum line width
		 truncate-lines t                  ; Don't fold lines
		 indent-tabs-mode nil              ; Use spaces instead of tabs
		 split-width-threshold 160         ; Split verticly by default
		 split-height-threshold nil        ; Split verticly by default
		 frame-resize-pixelwise t          ; Fine-grained frame resize
		 auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
  #+end_src

   The =load-path= specifies where Emacs should look for =.el=-files (or
   Emacs lisp files). I have a directory called =site-lisp= where I keep all
   extensions that have been installed manually.
  #+begin_src emacs-lisp
   (let ((default-directory (concat user-emacs-directory "site-lisp/")))
     (when (file-exists-p default-directory)
       (setq load-path
             (append
              (let ((load-path (copy-sequence load-path)))
                (normal-top-level-add-subdirs-to-load-path)) load-path))))
  #+end_src

   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

  #+begin_src emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src

   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+begin_src emacs-lisp
   (setq version-control t  ;; Use version numbers for backups.
      kept-new-versions 10  ;; Number of newest versions to keep.
      kept-old-versions 0   ;; Number of oldest versions to keep.
      delete-old-versions t ;; Don't ask to delete excess backup versions.
      backup-by-copying t)  ;; Copy all files, don't rename them.
   (setq vc-make-backup-files t)
   ;; Default and per-save backups go here:
   (setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

   (defun force-backup-of-buffer ()
   ;; Make a special "per session" backup at the first save of each
   ;; emacs session.
   (when (not buffer-backed-up)
    ;; Override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
          (kept-new-versions 3))
      (backup-buffer)))
   ;; Make a "per save" backup on each save.  The first save results in
   ;; both a per-session and a per-save backup, to keep the numbering
   ;; of per-save backups consistent.
   (let ((buffer-backed-up nil))
    (backup-buffer)))
   (add-hook 'before-save-hook  'force-backup-of-buffer)
   #+end_src

   By default the =narrow-to-region= command is disabled and issues a
   warning, because it might confuse new users. I find it useful sometimes,
   and don't want to be warned.

   #+begin_src emacs-lisp
   (put 'narrow-to-region 'disabled nil)
   #+end_src

   Automatically revert =doc-view=-buffers when the file changes on disk.

   #+begin_src emacs-lisp
   (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+end_src

* Key bindings

  Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that holds
  all my custom bindings. This map can be activated by toggling a simple
  =minor-mode= that does nothing more than activating the map. This inhibits
  other =major-modes= to override these bindings.

  #+begin_src emacs-lisp

  (defvar custom-bindings-map (make-keymap)
    "A keymap for custom bindings.")

  #+end_src   

* Visual

  First off, let's declutter. Remove clickies to give a nice and clean look.
  Also, the cursor can relax. We add this to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init]], as it might be
  marginally faster, and look less wonky.

  #+begin_src emacs-lisp :tangle early-init.el

  (dolist (mode
           '(tool-bar-mode                ; No toolbars, more room for text
             scroll-bar-mode              ; No scroll bars either
             menu-bar-mode                ; No menu bars
             blink-cursor-mode))          ; The blinking cursor gets old
    (funcall mode 0))

  #+end_src

** Theme

   For the light theme, I keep the light background toned down a touch.

   #+begin_src emacs-lisp

   ;; N Λ N O theme
   (use-package nano-theme
     :init
     (setq nano-light-background "#fafafa"
           nano-light-highlight "#f5f7f8"))

   #+end_src

   Load light theme by default

   #+begin_src emacs-lisp

   (defun load-nano-theme (variant)
     (let ((theme (intern (concat "nano-" (symbol-name variant)))))
       (load-theme theme t)))

   (load-nano-theme 'light)

   #+end_src   
   
   I want to be able to quickly switch between a light and a dark theme.

   #+begin_src emacs-lisp

   (defun cycle-themes ()
     "Returns a function that lets you cycle your themes."
     (let ((themes '(nano-light nano-dark)))
       (lambda ()
         (interactive)
         ;; Rotates the theme cycle and changes the current theme.
         (let ((rotated (nconc (cdr themes) (list (car themes)))))
           (load-theme (car (setq themes rotated)) t))
         (message (concat "Switched to " (symbol-name (car themes)))))))

   #+end_src   
   
** Mode line

   Trying out [[https://github.com/rougier/nano-modeline][N Λ N O Modeline]] :

   #+begin_src emacs-lisp

   ;; N Λ N O modeline
   (use-package nano-modeline
     :init
     ;; Disable the default modeline
     (setq-default mode-line-format nil)
     :config
     (defun my-default-nano-modeline (&optional default)
       "My nano modeline configuration."
       (funcall nano-modeline-position
                `((nano-modeline-buffer-status)        
                  (nano-modeline-buffer-name)                  
                  (nano-modeline-git-info))
                `((nano-modeline-cursor-position)
                  (nano-modeline-window-dedicated))
                default))
     (my-default-nano-modeline 1))

   #+end_src   

** Font

   Use the [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]] font if it's installed on the system.

   #+begin_src emacs-lisp
   (cond ((member "Hasklig" (font-family-list))
          (set-face-attribute 'default nil :font "Hasklig-14"))
         ((member "Inconsolata" (font-family-list))
          (set-face-attribute 'default nil :font "Inconsolata-14")))
   #+end_src

   New in Emacs 24.4 is the =prettify-symbols-mode=! It's neat.

   #+begin_src emacs-lisp
   (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                          ("delta" . ?Δ)
                                          ("gamma" . ?Γ)
                                          ("phi" . ?φ)
                                          ("psi" . ?ψ)))
   #+end_src   

** Dashboard

   Dashboard provides a nice welcome.

   #+begin_src emacs-lisp

   ;; A startup screen extracted from Spacemacs
   (use-package dashboard
     :config
     (setq dashboard-projects-backend 'project-el
           dashboard-banner-logo-title nil
           dashboard-center-content t
           dashboard-set-footer nil
           dashboard-page-separator "\n\n\n"
           dashboard-items '((projects . 15)
                             (recents  . 15)
                             (bookmarks . 5)))
     (dashboard-setup-startup-hook))

   #+end_src   
   
* Modes

  Here are a list of modes that I prefer enable by default.

  #+begin_src emacs-lisp

  (dolist (mode
           '(abbrev-mode                  ; E.g. sopl -> System.out.println
             column-number-mode           ; Show column number in mode line
             delete-selection-mode        ; Replace selected text
             dirtrack-mode                ; directory tracking in *shell*
             global-so-long-mode          ; Mitigate performance for long lines
             recentf-mode                 ; Recently opened files
             global-prettify-symbols-mode ; Greek letters should look greek
             show-paren-mode))            ; Highlight matching parentheses
    (funcall mode 1))

  #+end_src

* Version control

  Magit is the best.

  #+begin_src emacs-lisp

  ;; A Git porcelain inside Emacs.
  (use-package magit
    :bind (:map custom-bindings-map ("C-c m" . magit-status)))

  #+end_src

  Have some visual indication where there are uncommitted changes.

  #+begin_src emacs-lisp

  ;; Highlight uncommitted changes using VC
  (use-package diff-hl
    :config
    (global-diff-hl-mode 1))

  #+end_src

* Project

  #+begin_src emacs-lisp

  (use-package project
    :config
    (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?m)))

  #+end_src

* EditorConfig

  Using [[https://editorconfig.org/][EditorConfig]] is a must when collaborating with others. It is also a way
  of having multiple tools that want to format your buffer to agree (e.g. both
  the language's Emacs mode and some external formatter/prettifier).

  #+begin_src emacs-lisp

  ;; EditorConfig Emacs Plugin
  (use-package editorconfig
    :config
    (editorconfig-mode 1))

  #+end_src   

* Completion UI

  I have transitioned from [[https://emacs-helm.github.io/helm/][Helm]] to [[http://oremacs.com/swiper/][Ivy]], and now, on to [[https://github.com/minad/vertico][Vertico]]. It improves the
  interface calling commands (i.e. ~M-x~), finding files, switching buffers,
  searching files and so on. Using the ~vertico-buffer-mode~ gives a more
  Helm-like experience, where completions are given a full fledged buffer.

  #+begin_src emacs-lisp

  ;; VERTical Interactive COmpletion
  (use-package vertico
    :init
    (vertico-mode 1)
    :config
    (setq vertico-count 25))

  #+end_src

  The completions are centered in a posframe (a frame at point).

  #+begin_src emacs-lisp

  ;; Using posframe to show Vertico
  (use-package vertico-posframe
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-width 100
          vertico-posframe-height vertico-count))

  #+end_src

  Use the built in ~savehist-mode~ to prioritize recently used commands.

  #+begin_src emacs-lisp

  ;; Save minibuffer history
  (use-package savehist
    :init
    (savehist-mode 1))

  #+end_src

  With [[https://github.com/minad/marginalia/][Marginalia]], we get better descriptions for commands inline.

  #+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations
  (use-package marginalia
    :init 
    (marginalia-mode 1))

  #+end_src  

** Completion

   I used [[https://github.com/auto-complete/auto-complete][Auto-Complete]] for years, then I used [[http://company-mode.github.io/][company-mode]] for even more years,
   and now I am giving [[https://github.com/minad/corfu][corfu]] a shot. I want a pretty aggressive completion
   system, hence the no delay settings and a short prefix length.

   #+begin_src emacs-lisp

   ;; Modular text completion framework
   (use-package corfu
     :init
     (global-corfu-mode 1)
     (corfu-popupinfo-mode 1)
     :config
     (setq corfu-cycle t
           corfu-auto t
           corfu-auto-delay 0
           corfu-auto-prefix 2
           corfu-popupinfo-delay 0.5))

   #+end_src

   I use corfu in concert with [[https://github.com/oantolin/orderless][orderless]].

  #+begin_src emacs-lisp

  ;; Emacs completion style that matches multiple regexps in any order
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic partial-completion)
          completion-category-overrides '((file (styles basic partial-completion)))
          orderless-component-separator "[ |]"))

  #+end_src
  
* Spelling
** Flyspell

   Flyspell offers on-the-fly spell checking.

   When working with several languages, we should be able to cycle through the
   languages we most frequently use. Every buffer should have a separate cycle
   of languages, so that cycling in one buffer does not change the state in a
   different buffer (this problem occurs if you only have one global cycle). We
   can implement this by using a [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Closures.html][closure]].

   #+begin_src emacs-lisp

   (defun cycle-languages ()
     "Changes the ispell dictionary to the first element in
   ISPELL-LANGUAGES, and returns an interactive function that cycles
   the languages in ISPELL-LANGUAGES when invoked."
     (let ((ispell-languages (list "american" "francais")))
       (lambda ()
         (interactive)
         ;; Rotates the languages cycle and changes the ispell dictionary.
         (let ((rotated (nconc (cdr ispell-languages) (list (car ispell-languages)))))
           (ispell-change-dictionary (car (setq ispell-languages rotated)))))))

   #+end_src

   We enable =flyspell-mode= for all text-modes, and use =flyspell-prog-mode=
   for spell checking comments and strings in all programming modes. We bind
   =C-c l= to a function returned from =cycle-languages=, giving a language
   switcher for every buffer where flyspell is enabled.

   #+begin_src emacs-lisp

   (use-package flyspell
     :defer t
     :if (executable-find "aspell")
     :hook ((text-mode . flyspell-mode)
            (prog-mode . flyspell-prog-mode)
            (flyspell-mode . (lambda ()
                               (local-set-key
                                (kbd "C-c l")
                                (cycle-languages)))))
     :config
     (ispell-change-dictionary "american" t))

   #+end_src

* Org

  I use Org mode extensively. Some of these configurations may be unfortunate,
  but it is a bit impractical to change, as I have years worth of org-files and
  want to avoid having to reformat a lot of files.

  One example is =org-adapt-indentation=, which changed default value in
  version 9.5 of Org mode. Another is that I for some unknown reason decided to
  content within source content not be indented by two spaces (which is the
  default).

  Note that I disable some safety features, so please don't copy and paste
  mindlessly (see the documentation for =org-confirm-babel-evaluate= and
  =org-export-allow-bind-keywords=).

  #+begin_src emacs-lisp

  ;; Outline-based notes management and organizer
  (use-package org
    :defer t
    :config
    (setq org-adapt-indentation t
          org-hide-leading-stars t
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-src-fontify-natively t
          org-use-sub-superscripts nil
          org-startup-folded t
          org-edit-src-content-indentation 0))

  #+end_src

** Org Modern

   Touch up the appearance of org mode files with some fancy UTF-8 characters.
   I disable ~org-modern-block-fringe~ due to [[https://github.com/minad/org-modern/issues/144][org-modern conflicting with]]
   ~org-adapt-indentation~.

   #+begin_src emacs-lisp

   ;; Modern looks for Org
   (use-package org-modern
     :after org
     :hook (org-mode . org-modern-mode)
     :config
     (setq org-modern-block-fringe nil))

   #+end_src   
   
* Markdown

  #+begin_src emacs-lisp

  ;; Emacs Major mode for Markdown-formatted files
  (use-package markdown-mode
    :defer t)

  #+end_src

* Multiple cursors

  I use this /all the time/. Perhaps more than I should?

  #+begin_src emacs-lisp

  ;; Multiple cursors for Emacs
  (use-package multiple-cursors
    :defer t
    :bind (:map custom-bindings-map
                ("C-c e" . mc/edit-lines)
                ("C-c a" . mc/mark-all-like-this)
                ("C-c n" . mc/mark-next-like-this)))

  #+end_src  

* Try

  [[https://github.com/larstvei/Try][Try]] is my own package for trying out packages without installing them. It is
  the most useful of my packages (IMO).

  #+begin_src emacs-lisp

  ;; Try out Emacs packages
  (use-package try
    :defer t)

  #+end_src
* Interactive functions

  I sometimes regret killing the =*scratch*=-buffer, and have realized I never
  want to actually kill it. I just want to get it out of the way, and clean it
  up. The function below does just this for the =*scratch*=-buffer, and works
  like =kill-this-buffer= for any other buffer. It removes all buffer content
  and buries the buffer (this means making it the least likely candidate for
  =other-buffer=).

  #+begin_src emacs-lisp

  (defun kill-this-buffer-unless-scratch ()
    "Works like `kill-this-buffer' unless the current buffer is the
  ,*scratch* buffer. In witch case the buffer content is deleted and
  the buffer is buried."
    (interactive)
    (if (not (string= (buffer-name) "*scratch*"))
        (kill-this-buffer)
      (delete-region (point-min) (point-max))
      (switch-to-buffer (other-buffer))
      (bury-buffer "*scratch*")))

  #+end_src

To tidy up a buffer we define this function borrowed from [[https://github.com/simenheg][simenheg]].

  #+begin_src emacs-lisp

  (defun tidy ()
    "Ident, untabify and unwhitespacify current buffer, or region if active."
    (interactive)
    (let ((beg (if (region-active-p) (region-beginning) (point-min)))
          (end (if (region-active-p) (region-end) (point-max))))
      (indent-region beg end)
      (whitespace-cleanup)
      (untabify beg (if (< end (point-max)) end (point-max)))))

  #+end_src

  Given a list of strings separated by newlines, in example :

  josh
  sam
  jed
  C.J.
  toby

  You select the text, and run =arrayify=. 

  You can optionally provide a quote character and receive this output:
  "josh", "jed", "sam", "C.J.", "toby"

  This is incredibly useful for taking lists of IDs, or email addresses, etc,
  and transforming them for pasting into documents, emails or "in" clauses in SQL, etc.
  It is unbelievably useful.

  #+begin_src emacs-lisp
  (defun arrayify (start end quote)
   "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
   (interactive "r\nMQuote: ")
   (let ((insertion
          (mapconcat
           (lambda (x) (format "%s%s%s" quote x quote))
           (split-string (buffer-substring start end)) ", ")))
     (delete-region start end)
     (insert insertion)))
  #+end_src

  org-source-block template

  #+begin_src emacs-lisp

  (defun org-insert-source-block (name language)
   "Asks name, language of org-source-block.
  Inserts org-mode source code snippet"
   (interactive "sInserting new org source block -> block name? 
  sblock language?  ")
   (insert 
    (if (string= name "")
        ""
      (concat "#+NAME: " name) )
    (format "
  ,#+begin_src %s

  ,#+end_src" language
  )
    )
   (forward-line -1)
   (goto-char (line-end-position))
   )

  #+end_src
  
* Non-interactive functions

Custom package-vc-install which is usable with use-package
tony-zorman.com/posts/package-vc-install.html

~Example of use~:

# (use-package math-delimiters
#   :init (slot/vc-install :fetcher "github.com" :repo "oantolin/math-delimiters")
#   ;; OR (slot/vc-install :repo "oantolin/math-delimiters")
#   )

#+begin_src emacs-lisp
(cl-defun slot/vc-install (&key (fetcher "github.com") repo name rev backend)
"Install a package from a remote if it's not already installed.
This is a thin wrapper around `package-vc-install' in order to
make non-interactive usage more ergonomic.  Takes the following
named arguments:

- FETCHER the remote where to get the package (e.g., \"gitlab.com\").
  If omitted, this defaults to \"github.com\".

- REPO should be the name of the repository (e.g.,
  \"slotThe/arXiv-citation\".

- NAME, REV, and BACKEND are as in `package-vc-install' (which
  see)."
  (let* ((url (format "https://%s/%s" fetcher repo))
         (iname (when name (intern name)))
         (pac-name (or iname (intern (file-name-base repo)))))
    (unless (package-installed-p pac-name)
      (package-vc-install url iname rev backend))))
#+end_src

* Advice

  An advice can be given to a function to make it behave differently. This
  advice makes =eval-last-sexp= (bound to =C-x C-e=) replace the sexp with the
  value.

  #+begin_src emacs-lisp

  (defadvice eval-last-sexp (around replace-sexp (arg) activate)
    "Replace sexp when called with a prefix argument."
    (if arg
        (let ((pos (point)))
          ad-do-it
          (goto-char pos)
          (backward-kill-sexp)
          (forward-sexp))
      ad-do-it))

  #+end_src

  When interactively changing the theme (using =M-x load-theme=), the current
  custom theme is not disabled. This often gives weird-looking results; we can
  advice =load-theme= to always disable themes currently enabled themes.

  #+begin_src emacs-lisp

  (defadvice load-theme
      (before disable-before-load (theme &optional no-confirm no-enable) activate)
    (mapc 'disable-theme custom-enabled-themes))

  #+end_src

* global-scale-mode

  These functions provide something close to ~text-scale-mode~, but for every
  buffer, including the minibuffer and mode line.

  #+begin_src emacs-lisp

  (let* ((default (face-attribute 'default :height))
         (size default))

    (defun global-scale-default ()
      (interactive)
      (global-scale-internal (setq size default)))

    (defun global-scale-up ()
      (interactive)
      (global-scale-internal (setq size (+ size 20))))

    (defun global-scale-down ()
      (interactive)
      (global-scale-internal (setq size (- size 20))))

    (defun global-scale-internal (arg)
      (set-face-attribute 'default (selected-frame) :height arg)
      (set-transient-map
       (let ((map (make-sparse-keymap)))
         (define-key map (kbd "C-=") 'global-scale-up)
         (define-key map (kbd "C-+") 'global-scale-up)
         (define-key map (kbd "C--") 'global-scale-down)
         (define-key map (kbd "C-0") 'global-scale-default) map))))

  #+end_src  

* Mode specific
** Tree-sitter

  This is a game changer ;)

  masteringemacs.org/article/how-to-get-started-tree-sitter

  Whenever a new language grammar is added M-x elisp-eval-region-or-buffer the
  following code block below:

  #+begin_src emacs-lisp :tangle no

  (setq treesit-language-source-alist
   '((heex "https://github.com/phoenixframework/tree-sitter-heex")
     (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (bash "https://github.com/tree-sitter/tree-sitter-bash")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (odin "https://github.com/tree-sitter-grammars/tree-sitter-odin")
     (python "https://github.com/tree-sitter/tree-sitter-python")))
  ;; Should use:
  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
  ;; at least once per installation or while changing this list

  #+end_src

  #+begin_src emacs-lisp

  (use-package
   emacs
   :ensure nil
   :custom
    (major-mode-remap-alist
    '((sh-mode . bash-ts-mode)
      (js2-mode . js-ts-mode)
      (json-mode . json-ts-mode)
      (css-mode . css-ts-mode)
      (python-mode . python-ts-mode)
      (elixir-mode . elixir-ts-mode))))

  #+end_src
   
** Eglot

  I am using [[https://joaotavora.github.io/eglot/][eglot]], which is built in from [[https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-29#n3273][emacs 29.1]].

  #+begin_src emacs-lisp

        (use-package eglot
          :ensure nil
          :config (add-to-list 'eglot-server-programs
                               '(elixir-ts-mode "~/emacs-grimoire/emacs-deps/language-server/elixir-ls-v0.17.1/language_server.sh"))
          :config (add-to-list 'eglot-server-programs
                               '(php-mode . ("intelephense" "--stdio")))
          :config (add-to-list 'eglot-server-programs
                               '(odin-mode . ("ols")))
          :hook ((odin-mode . eglot-ensure)))

  #+end_src
   
** Bash

  #+begin_src emacs-lisp

  (use-package
   sh-mode
   :ensure nil
   :mode "\\.sh?\\'"
   :hook (bash-ts-mode . eglot-ensure))

  #+end_src   
   
** Elixir

  Trying out tree-sitter with elixir-ts-mode, bye elixir-mode!

  #+begin_src emacs-lisp

  (use-package
   elixir-ts-mode
   :hook (elixir-ts-mode . eglot-ensure)
   (elixir-ts-mode
    .
    (lambda ()
      (push '(">=" . ?\u2265) prettify-symbols-alist)
      (push '("<=" . ?\u2264) prettify-symbols-alist)
      (push '("!=" . ?\u2260) prettify-symbols-alist)
      (push '("=~" . ?\u2245) prettify-symbols-alist)
      (push '("<-" . ?\u2190) prettify-symbols-alist)
      (push '("->" . ?\u2192) prettify-symbols-alist)
      (push '("<-" . ?\u2190) prettify-symbols-alist)
      (push '("|>" . ?\u25B7) prettify-symbols-alist)))
   (before-save . eglot-format))

  #+end_src   

** Erlang

  #+begin_src emacs-lisp
  (use-package
    erlang
    :defer t)
  #+end_src
   
** JavaScript

  #+begin_src emacs-lisp

  (use-package
   js2-mode
   :init
   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   :hook (js-ts-mode . eglot-ensure))

  #+end_src
   
** Web-mode

  #+begin_src emacs-lisp

  (use-package
   web-mode
   :init
   (setq
    web-mode-markup-indent-offset 2
    web-mode-css-indent-offset 2
    web-mode-code-indent-offset 2)
   :config
   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.eex?\\'" . web-mode)))

  #+end_src
  
** Lisp

  [[https://paredit.org/][Paredit]] is a must have when editing lisp code.

  #+begin_src emacs-lisp

  ;; minor mode for editing parentheses
  (use-package paredit
    :defer t
    :bind (:map paredit-mode-map ("RET" . nil))
    :hook ((slime-repl-mode
            lisp-mode
            emacs-lisp-mode
            geiser-repl-mode
            lisp-interaction-mode
            scheme-mode
            racket-mode) 
           . paredit-mode))

  #+end_src  

  rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
  delimiters such as parentheses, brackets or braces according to their depth.
  Each successive level is highlighted in a different color. This makes it easy
  to spot matching delimiters, orient yourself in the code, and tell which
  statements are at a given depth.

  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook ((slime-repl-mode
            lisp-mode
            emacs-lisp-mode
            geiser-repl-mode
            lisp-interaction-mode
            scheme-mode
            racket-mode) 
           . rainbow-delimiters-mode))
  #+end_src  
  
*** Emacs Lisp

  #+begin_src emacs-lisp

  (use-package
   elisp-autofmt
   :commands (elisp-autofmt-mode elisp-autofmt-buffer)
   :hook (emacs-lisp-mode . elisp-autofmt-mode))

  #+end_src   

  In =emacs-lisp-mode= we can enable =eldoc-mode= to display information
  about a function or a variable in the echo area.

  #+begin_src emacs-lisp

  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)

  #+end_src

*** Scheme

  Geiser is a collection of Emacs major and minor modes that conspire with one or
  more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws
  inspiration (and a bit more) from environments such as Common Lisp’s Slime,
  Factor’s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking
  inside Emacs (even more) fun.


  #+begin_src emacs-lisp

    (use-package
     geiser
     :defer t)

  #+end_src

  Chez Scheme integration with Geiser

  #+begin_src emacs-lisp

  (use-package geiser-chez
    :after geiser)

  #+end_src

  mit-scheme integration with Geiser for SICP

  #+begin_src emacs-lisp

  (use-package geiser-mit
    :after geiser)

  #+end_src

  Racket includes a rich set of libraries, covering the full range from web
  server apps to mathematics and scientific simulation software.

  #+begin_src emacs-lisp
  (use-package racket-mode
    :mode "\\.rkt?\\'")
  #+end_src  
  
  #+begin_src emacs-lisp
  (use-package geiser-racket
    :after geiser)
  #+end_src
  
*** Common lisp

  #+begin_quote
  This configuration must be tested, one day I will find a good project in
  Common Lisp and test it out!
  #+end_quote

  I use [[http://www.common-lisp.net/project/slime/][Slime]] along with =lisp-mode= to edit Common Lisp code. Slime provides
  code evaluation and other great features, a must have for a Common Lisp
  developer. You can install the Common Lisp slime counterpart using
  [[http://www.quicklisp.org/beta/][Quicklisp]], creating a helper that can be loaded.

  We can specify what Common Lisp program Slime should use (I use SBCL). More
  sensible =loop= indentation is borrowed from [[https://github.com/simenheg][simenheg]].

  #+begin_src emacs-lisp

  ;; Superior Lisp Interaction Mode for Emacs
  (use-package slime
    :disabled
    :defer t
    :bind (:map slime-repl-mode-map ("C-l" . slime-repl-clear-buffer))
    :hook (common-lisp-mode . activate-slime-helper)
    :config
    (when (file-exists-p "~/.quicklisp/slime-helper.el")
      (load (expand-file-name "~/.quicklisp/slime-helper.el")))

    (setq inferior-lisp-program "sbcl")

    (setq lisp-loop-forms-indentation   6
          lisp-simple-loop-indentation  2
          lisp-loop-keyword-indentation 6))

  #+end_src
   
** PHP

  Yep still using PHP...where's my tree-sitter!?

  #+begin_src emacs-lisp
  (use-package
   php-mode
   :mode "\\.php?\\'"
   :hook (php-mode . eglot-ensure))

  #+end_src

** R

  I use R a lot for reporting purposes at work

  #+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :init (require 'ess-site)
    :mode "\\.R?\\'")
  #+end_src
** Odin

  Trying out Odin for game dev

  #+begin_src emacs-lisp

  (use-package odin-mode
    :init (slot/vc-install :fetcher "git.sr.ht" :repo "~mgmarlow/odin-mode")
    :bind (:map odin-mode-map
                ("C-c C-r" . 'odin-run-project)
                ("C-c C-c" . 'odin-build-project)
                ("C-c C-t" . 'odin-test-project))
    )  
  #+end_src  
   
* Which key

  [[https://github.com/justbur/emacs-which-key][Which key]] is nice for discoverability.

  #+begin_src emacs-lisp

  ;; Display available keybindings in popup
  (use-package which-key
    :config
    (which-key-mode 1))

  #+end_src

* Bindings for built-ins

 #+begin_src emacs-lisp

 (use-package emacs
   :bind (:map custom-bindings-map
               ("M-u" . upcase-dwim)
               ("M-c" . capitalize-dwim)
               ("M-l" . downcase-dwim)
               ("M-]" . other-frame)
               ("C-j" . newline-and-indent)
               ("C-c s" . ispell-word)
               ("C-c v" . visible-mode)))

 #+end_src

* Bindings for user-defined functions

 #+begin_src emacs-lisp

    (use-package emacs
      :bind (("M-p" . jump-to-previous-like-this)
	     ("M-n" . jump-to-next-like-this)
	     :map custom-bindings-map
	     ("M-,"     . jump-to-previous-like-this)
	     ("M-."     . jump-to-next-like-this)
	     ("C-x k"   . kill-this-buffer-unless-scratch)
	     ("C-c C-0" . global-scale-default)
	     ("C-c C-=" . global-scale-up)
	     ("C-c C-+" . global-scale-up)
	     ("C-c C--" . global-scale-down)
	     ("<C-tab>" . tidy))
      :config
      (define-key custom-bindings-map (kbd "C-c .") (cycle-themes))
      (define-key custom-bindings-map (kbd "C-x sb") 'org-insert-source-block))
   
   
 #+end_src

 Lastly we need to activate the map by creating and activating the
 =minor-mode=.

 #+begin_src emacs-lisp

 (define-minor-mode custom-bindings-mode
   "A mode that activates custom-bindings."
   :init-value t
   :keymap custom-bindings-map)

 #+end_src  

* Server

  I sometimes want to open files from the terminal into my current Emacs
  process, a simple Emacs server will do the job for now.

  #+begin_src emacs-lisp :tangle yes
  (require 'server)
  (unless (server-running-p) (server-start))
  #+end_src
